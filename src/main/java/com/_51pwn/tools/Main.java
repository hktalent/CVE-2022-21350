package com._51pwn.tools;

import com.google.common.hash.Hashing;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarInputStream;

/**
1、遍历指定目录中所有jar
2、自动内存解压
3、动态加载jar
4、动态判断所有class的接口信息、方法信息


 */
public class Main {

    public static String getFileMD5(String filepath){
        return getFileMD5(new File(filepath));
    }

    public static String getFileMD5(File file){
        try {
            return com.google.common.io.Files.hash(file, Hashing.md5()).toString();
        } catch (IOException e) {
            return file.getAbsolutePath();
        }
    }

    // 判判断是否是可序列化
    public static boolean isSerializable(Class c){
//        if(c == Object.class){
//            return true;
//        }
        if(c == java.io.Serializable.class || c == java.io.Externalizable.class){
            return true;
        }
        Class []ifc=c.getInterfaces();
        if(0 < ifc.length){
            for(Class c1:ifc){
                if(c1 == java.io.Serializable.class || c1 == java.io.Externalizable.class){
                    return true;
                }
                if(c1 !=c && isSerializable(c1)){
                    return true;
                }
                if(null !=c1.getSuperclass() && c1.getSuperclass() !=Object.class && isSerializable(c1.getSuperclass())){
                    return true;
                }
            }
        }
        // 默认只处理单继承的情况
        if(null !=c.getSuperclass() && c.getSuperclass() != Object.class && isSerializable(c.getSuperclass())){
            return true;
        }
        return false;
    }


    // 获取所有接口信息
    public static void GetAllItfc(Class c,Map <String,String>m1){
        Class []ifc=c.getInterfaces();
        if(0 < ifc.length){
            for(Class c1:ifc){
                m1.put(c1.getName(),"");
                if(null !=c1.getSuperclass() && c1.getSuperclass() !=Object.class){
                    GetAllItfc(c1.getSuperclass(),m1);
                }
            }
        }
        // 默认只处理单继承的情况
        if(null !=c.getSuperclass()  && c.getSuperclass() !=Object.class){
            GetAllItfc(c.getSuperclass(),m1);
        }
    }

    // 类似类 import 引用的类信息
    public static void getDeclaredClasses(Class c,Map <String,String>m1){
        Class []a = c.getDeclaredClasses();
        for(Class c1:a){
            m1.put(c1.getName(),"");
        }
        // 父类处理
        Class p = c.getSuperclass();
        if(null !=p && p !=Object.class){
            getDeclaredClasses(p,m1);
        }
    }
    //  遍历所有可被序列化的成员，包括 Object类型的成员
    public static void GetAllFld(Class c,Map <String,String>m1){
        Field[]fs = c.getDeclaredFields();
        for(Field f:fs){
            String s1 = f.toGenericString();
            if((f.getType() == Object.class || isSerializable(f.getType())) && -1 == s1.indexOf("static") && -1 == s1.indexOf("final")) {
                m1.put(f.getName(),f.getType().getName());
            }
        }
        // 父类处理
        Class p = c.getSuperclass();
        if(null !=p && p !=Object.class){
            GetAllFld(p,m1);
        }
    }

    //  1、遍历 jar 中 所有class，并判断是否是可序列化
    //  2、遍历所有可被序列化的 对象 成员，及这些成员对象的所有属性、方法
    public static void DoGetJarClass(Path jarPath,URLClassLoader child, Map<String,String> m1){
        try {
            JarInputStream jarInputStream = new JarInputStream(Files.newInputStream(jarPath));
            JarEntry jarEntry = jarInputStream.getNextJarEntry();
            while(jarEntry!=null){
                // 处理class
                if (!jarEntry.isDirectory() && jarEntry.getName().endsWith(".class")){
                    String s=jarEntry.getName().toString().replaceAll("\\/",".");
                    s = s.substring(0,s.length()-6);
                    try {
                        if(m1.get(s) == null) {
                            m1.put(s,"");
                            Class ctl = Class.forName(s, true, child);
                            // 如果是，则记录
                            if (isSerializable(ctl)) {
                                Map m = new HashMap<String,Object>();
                                Map m5 = new HashMap<String,String>();
                                Map m2 = new HashMap<String,String>();
                                Map m3 = new HashMap<String,String>();
                                GetAllItfc(ctl,m5);
                                GetAllFld(ctl,m2);
                                getDeclaredClasses(ctl,m3);
                                m.put("name",ctl.getName());
                                m.put("tags","weblogic");
                                m.put("interface",m5.keySet().toArray());
                                m.put("DeclaredFields",m2);
                                m.put("DeclaredClasses",m3.keySet().toArray());
                                List list = new ArrayList<Map>();
                                list.add(m);
                                toGoIndex.Save2GoIndex1(list);
//                                System.out.println(ctl.getName());
                            }
                        }
                    }catch (Throwable e){
                        // 记录异常的类及其jar
//                        System.out.println(s);
//                        e.printStackTrace();
                    }
                }
                jarEntry = jarInputStream.getNextJarEntry();
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    // 根目录遍历
    public static void DoRootDir(String target) throws Exception {
        Path path = Paths.get(target).toAbsolutePath();
        final ArrayList <Path>alist = new ArrayList <Path>();
        Files.walkFileTree(path, new SimpleFileVisitor<Path>(){
            @Override
            public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {
                String filename = path.getFileName().toString();
                File f1 = path.toFile();
//                System.out.println(filename);
                // 只处理jar
                if(f1.isFile() && filename.endsWith(".jar")){
//                    String fileMd5 = getFileMD5(filename);
                    alist.add(path);
                }
                return FileVisitResult.CONTINUE;
            }
        });
        try {
            Object []a=alist.toArray();
            URL[] aUs = new URL[a.length];
            int i = 0;
            for(Object o1:a){
                java.net.URL ju01 =((Path)o1).toFile().toURI().toURL();
//                System.out.println(ju01.toString());
                aUs[i++] = ju01;

            }
            URLClassLoader child = new URLClassLoader(aUs, Main.class.getClassLoader());
            Map<String,String> m1 = new HashMap<String,String>();
            // skip
            m1.put("org.antlr.stringtemplate.language.ChunkToken","");
            for(Object o1:a){
                // 遍历jar中class
                DoGetJarClass((Path)o1,child,m1);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        String root = "/Users/51pwn/MyWork/CVE-2022-23305/oracle";
        DoRootDir(root);
    }
}
